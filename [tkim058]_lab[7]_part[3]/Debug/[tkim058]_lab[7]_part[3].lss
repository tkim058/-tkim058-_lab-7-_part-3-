
[tkim058]_lab[7]_part[3].elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000422  000004b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000422  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800104  00800104  000004ba  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004ba  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  0000052c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b19  00000000  00000000  00000594  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000894  00000000  00000000  000010ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004fc  00000000  00000000  00001941  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e4  00000000  00000000  00001e40  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000595  00000000  00000000  00001f24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001f7  00000000  00000000  000024b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  000026b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	6d c0       	rjmp	.+218    	; 0x110 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e2       	ldi	r30, 0x22	; 34
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a2 31       	cpi	r26, 0x12	; 18
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	14 d1       	rcall	.+552    	; 0x2ec <main>
  c4:	ac c1       	rjmp	.+856    	; 0x41e <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <TimerOn>:
	TCCR1B = 0x00;	// bit3bit1bit0 = 000: timer off
}

void TimerISR()
{
	TimerFlag = 1;
  c8:	8b e0       	ldi	r24, 0x0B	; 11
  ca:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  ce:	8d e7       	ldi	r24, 0x7D	; 125
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  d6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  da:	82 e0       	ldi	r24, 0x02	; 2
  dc:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
  e0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  e4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
  e8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  ec:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
  f0:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
  f4:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
  f8:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_avr_timer_cntcurr>
  fc:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <_avr_timer_cntcurr+0x1>
 100:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <_avr_timer_cntcurr+0x2>
 104:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <_avr_timer_cntcurr+0x3>
 108:	8f b7       	in	r24, 0x3f	; 63
 10a:	80 68       	ori	r24, 0x80	; 128
 10c:	8f bf       	out	0x3f, r24	; 63
 10e:	08 95       	ret

00000110 <__vector_13>:
}

//In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect)
{
 110:	1f 92       	push	r1
 112:	0f 92       	push	r0
 114:	0f b6       	in	r0, 0x3f	; 63
 116:	0f 92       	push	r0
 118:	11 24       	eor	r1, r1
 11a:	8f 93       	push	r24
 11c:	9f 93       	push	r25
 11e:	af 93       	push	r26
 120:	bf 93       	push	r27
	//CPU automatically calls when TCNT1 == OCR1 (every 1ms per TimerOn settings)
	_avr_timer_cntcurr--;	//count down to 0 rather than up to TOP
 122:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_avr_timer_cntcurr>
 126:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <_avr_timer_cntcurr+0x1>
 12a:	a0 91 0c 01 	lds	r26, 0x010C	; 0x80010c <_avr_timer_cntcurr+0x2>
 12e:	b0 91 0d 01 	lds	r27, 0x010D	; 0x80010d <_avr_timer_cntcurr+0x3>
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	a1 09       	sbc	r26, r1
 136:	b1 09       	sbc	r27, r1
 138:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_avr_timer_cntcurr>
 13c:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <_avr_timer_cntcurr+0x1>
 140:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <_avr_timer_cntcurr+0x2>
 144:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <_avr_timer_cntcurr+0x3>
	if(_avr_timer_cntcurr == 0)
 148:	89 2b       	or	r24, r25
 14a:	8a 2b       	or	r24, r26
 14c:	8b 2b       	or	r24, r27
 14e:	99 f4       	brne	.+38     	; 0x176 <__vector_13+0x66>
	TCCR1B = 0x00;	// bit3bit1bit0 = 000: timer off
}

void TimerISR()
{
	TimerFlag = 1;
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <TimerFlag>
	//CPU automatically calls when TCNT1 == OCR1 (every 1ms per TimerOn settings)
	_avr_timer_cntcurr--;	//count down to 0 rather than up to TOP
	if(_avr_timer_cntcurr == 0)
	{
		TimerISR();
		_avr_timer_cntcurr = _avr_timer_M;
 156:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 15a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 15e:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 162:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 166:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_avr_timer_cntcurr>
 16a:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <_avr_timer_cntcurr+0x1>
 16e:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <_avr_timer_cntcurr+0x2>
 172:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <_avr_timer_cntcurr+0x3>
	}
}
 176:	bf 91       	pop	r27
 178:	af 91       	pop	r26
 17a:	9f 91       	pop	r25
 17c:	8f 91       	pop	r24
 17e:	0f 90       	pop	r0
 180:	0f be       	out	0x3f, r0	; 63
 182:	0f 90       	pop	r0
 184:	1f 90       	pop	r1
 186:	18 95       	reti

00000188 <TimerSet>:

//Set TimerISR() to tick every M ms
void TimerSet(unsigned long M)
{
	_avr_timer_M = M;
 188:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
 18c:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
 190:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
 194:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
	_avr_timer_cntcurr = _avr_timer_M;
 198:	60 93 0a 01 	sts	0x010A, r22	; 0x80010a <_avr_timer_cntcurr>
 19c:	70 93 0b 01 	sts	0x010B, r23	; 0x80010b <_avr_timer_cntcurr+0x1>
 1a0:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <_avr_timer_cntcurr+0x2>
 1a4:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <_avr_timer_cntcurr+0x3>
 1a8:	08 95       	ret

000001aa <TickFct_ThreeLeds>:

unsigned char threeLEDs = 0x00;
enum TL_States{TL_init, TL_T0, TL_T1, TL_T2} TL_state;
void TickFct_ThreeLeds()
{
	switch(TL_state)
 1aa:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <TL_state>
 1ae:	81 30       	cpi	r24, 0x01	; 1
 1b0:	51 f0       	breq	.+20     	; 0x1c6 <TickFct_ThreeLeds+0x1c>
 1b2:	28 f0       	brcs	.+10     	; 0x1be <TickFct_ThreeLeds+0x14>
 1b4:	82 30       	cpi	r24, 0x02	; 2
 1b6:	59 f0       	breq	.+22     	; 0x1ce <TickFct_ThreeLeds+0x24>
 1b8:	83 30       	cpi	r24, 0x03	; 3
 1ba:	69 f0       	breq	.+26     	; 0x1d6 <TickFct_ThreeLeds+0x2c>
 1bc:	10 c0       	rjmp	.+32     	; 0x1de <TickFct_ThreeLeds+0x34>
	{
		case TL_init:
		TL_state = TL_T0;
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <TL_state>
		break;
 1c4:	17 c0       	rjmp	.+46     	; 0x1f4 <TickFct_ThreeLeds+0x4a>
		
		case TL_T0:
		TL_state = TL_T1;
 1c6:	82 e0       	ldi	r24, 0x02	; 2
 1c8:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <TL_state>
 1cc:	1a c0       	rjmp	.+52     	; 0x202 <TickFct_ThreeLeds+0x58>
		break;
		
		case TL_T1:
		TL_state = TL_T2;
 1ce:	83 e0       	ldi	r24, 0x03	; 3
 1d0:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <TL_state>
 1d4:	1d c0       	rjmp	.+58     	; 0x210 <TickFct_ThreeLeds+0x66>
		break;
		
		case TL_T2:
		TL_state = TL_T0;
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <TL_state>
		break;
 1dc:	0b c0       	rjmp	.+22     	; 0x1f4 <TickFct_ThreeLeds+0x4a>
		
		default:
		break;
	}
	switch(TL_state)
 1de:	81 30       	cpi	r24, 0x01	; 1
 1e0:	49 f0       	breq	.+18     	; 0x1f4 <TickFct_ThreeLeds+0x4a>
 1e2:	28 f0       	brcs	.+10     	; 0x1ee <TickFct_ThreeLeds+0x44>
 1e4:	82 30       	cpi	r24, 0x02	; 2
 1e6:	69 f0       	breq	.+26     	; 0x202 <TickFct_ThreeLeds+0x58>
 1e8:	83 30       	cpi	r24, 0x03	; 3
 1ea:	c1 f4       	brne	.+48     	; 0x21c <TickFct_ThreeLeds+0x72>
 1ec:	11 c0       	rjmp	.+34     	; 0x210 <TickFct_ThreeLeds+0x66>
	{
		case TL_init:
		threeLEDs = 0x00;
 1ee:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <threeLEDs>
		break;
 1f2:	08 95       	ret
		
		case TL_T0:
		threeLEDs = (threeLEDs & 0xF8) | 0x01;
 1f4:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <threeLEDs>
 1f8:	88 7f       	andi	r24, 0xF8	; 248
 1fa:	81 60       	ori	r24, 0x01	; 1
 1fc:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <threeLEDs>
		break;
 200:	08 95       	ret
		
		case TL_T1:
		threeLEDs = (threeLEDs & 0xF8) | 0x02;
 202:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <threeLEDs>
 206:	88 7f       	andi	r24, 0xF8	; 248
 208:	82 60       	ori	r24, 0x02	; 2
 20a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <threeLEDs>
		break;
 20e:	08 95       	ret
		
		case TL_T2:
		threeLEDs = (threeLEDs & 0xF8) | 0x04;
 210:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <threeLEDs>
 214:	88 7f       	andi	r24, 0xF8	; 248
 216:	84 60       	ori	r24, 0x04	; 4
 218:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <threeLEDs>
 21c:	08 95       	ret

0000021e <TickFct_BlinkLed>:

unsigned char blinkingLED = 0x00;
enum BL_States {BL_init, BL_Off, BL_On} BL_state;
void TickFct_BlinkLed()
{
	switch(BL_state)
 21e:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <BL_state>
 222:	81 30       	cpi	r24, 0x01	; 1
 224:	41 f0       	breq	.+16     	; 0x236 <TickFct_BlinkLed+0x18>
 226:	18 f0       	brcs	.+6      	; 0x22e <TickFct_BlinkLed+0x10>
 228:	82 30       	cpi	r24, 0x02	; 2
 22a:	49 f0       	breq	.+18     	; 0x23e <TickFct_BlinkLed+0x20>
 22c:	0c c0       	rjmp	.+24     	; 0x246 <TickFct_BlinkLed+0x28>
	{
		case BL_init:
		BL_state = BL_Off;
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <BL_state>
		break;
 234:	11 c0       	rjmp	.+34     	; 0x258 <TickFct_BlinkLed+0x3a>
		
		case BL_Off:
		BL_state = BL_On;
 236:	82 e0       	ldi	r24, 0x02	; 2
 238:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <BL_state>
 23c:	10 c0       	rjmp	.+32     	; 0x25e <TickFct_BlinkLed+0x40>
		break;
		
		case BL_On:
		BL_state = BL_Off;
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <BL_state>
		break;
 244:	09 c0       	rjmp	.+18     	; 0x258 <TickFct_BlinkLed+0x3a>
		
		default:
		break;
	}
	
	switch(BL_state)
 246:	81 30       	cpi	r24, 0x01	; 1
 248:	39 f0       	breq	.+14     	; 0x258 <TickFct_BlinkLed+0x3a>
 24a:	18 f0       	brcs	.+6      	; 0x252 <TickFct_BlinkLed+0x34>
 24c:	82 30       	cpi	r24, 0x02	; 2
 24e:	69 f4       	brne	.+26     	; 0x26a <TickFct_BlinkLed+0x4c>
 250:	06 c0       	rjmp	.+12     	; 0x25e <TickFct_BlinkLed+0x40>
	{
		case BL_init:
		blinkingLED = 0x00;
 252:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <blinkingLED>
		break;
 256:	08 95       	ret
		
		case BL_Off:
		blinkingLED = 0x00;
 258:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <blinkingLED>
		break;
 25c:	08 95       	ret
		
		case BL_On:
		blinkingLED = (blinkingLED & 0xF0) | 0x08;
 25e:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <blinkingLED>
 262:	80 7f       	andi	r24, 0xF0	; 240
 264:	88 60       	ori	r24, 0x08	; 8
 266:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <blinkingLED>
 26a:	08 95       	ret

0000026c <TickFct_Sound>:
unsigned char buzz = 0x00;
unsigned char cnt = 0x00;
enum s_States {s_init, s_Off, s_On} s_state;
void TickFct_Sound()
{
	switch(s_state)
 26c:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <s_state>
 270:	81 30       	cpi	r24, 0x01	; 1
 272:	51 f0       	breq	.+20     	; 0x288 <TickFct_Sound+0x1c>
 274:	18 f0       	brcs	.+6      	; 0x27c <TickFct_Sound+0x10>
 276:	82 30       	cpi	r24, 0x02	; 2
 278:	79 f0       	breq	.+30     	; 0x298 <TickFct_Sound+0x2c>
 27a:	12 c0       	rjmp	.+36     	; 0x2a0 <TickFct_Sound+0x34>
	{
		case s_init:
		s_state = s_Off;
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <s_state>
		cnt = 0;
 282:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
		break;
 286:	18 c0       	rjmp	.+48     	; 0x2b8 <TickFct_Sound+0x4c>
		
		case s_Off:
		if(button)
 288:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <button>
 28c:	88 23       	and	r24, r24
 28e:	a1 f0       	breq	.+40     	; 0x2b8 <TickFct_Sound+0x4c>
		{
			s_state = s_On;
 290:	82 e0       	ldi	r24, 0x02	; 2
 292:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <s_state>
 296:	16 c0       	rjmp	.+44     	; 0x2c4 <TickFct_Sound+0x58>
			s_state = s_Off;
		}
		break;
		
		case s_On:
		s_state = s_Off;
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <s_state>
		break;
 29e:	0c c0       	rjmp	.+24     	; 0x2b8 <TickFct_Sound+0x4c>
		
		default:
		break;
	}
	switch(s_state)
 2a0:	81 30       	cpi	r24, 0x01	; 1
 2a2:	51 f0       	breq	.+20     	; 0x2b8 <TickFct_Sound+0x4c>
 2a4:	18 f0       	brcs	.+6      	; 0x2ac <TickFct_Sound+0x40>
 2a6:	82 30       	cpi	r24, 0x02	; 2
 2a8:	91 f4       	brne	.+36     	; 0x2ce <TickFct_Sound+0x62>
 2aa:	0c c0       	rjmp	.+24     	; 0x2c4 <TickFct_Sound+0x58>
	{
		case s_init:
		buzz = (buzz & 0xEF);
 2ac:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <buzz>
 2b0:	8f 7e       	andi	r24, 0xEF	; 239
 2b2:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <buzz>
		break;
 2b6:	08 95       	ret
		
		case s_Off:
		buzz = (buzz & 0xEF);
 2b8:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <buzz>
 2bc:	8f 7e       	andi	r24, 0xEF	; 239
 2be:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <buzz>
		break;
 2c2:	08 95       	ret
		
		case s_On:
		buzz = (buzz & 0xEF) | 0x10;
 2c4:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <buzz>
 2c8:	80 61       	ori	r24, 0x10	; 16
 2ca:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <buzz>
 2ce:	08 95       	ret

000002d0 <TickFct_Combine>:
}

enum CombineLED{C_init} C_state;
void TickFct_Combine()
{
	switch(C_state)
 2d0:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <C_state>
 2d4:	81 11       	cpse	r24, r1
 2d6:	09 c0       	rjmp	.+18     	; 0x2ea <TickFct_Combine+0x1a>
	{
		case C_init:
		PORTB = threeLEDs | blinkingLED | buzz;
 2d8:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <threeLEDs>
 2dc:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <blinkingLED>
 2e0:	89 2b       	or	r24, r25
 2e2:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <buzz>
 2e6:	89 2b       	or	r24, r25
 2e8:	85 b9       	out	0x05, r24	; 5
 2ea:	08 95       	ret

000002ec <main>:
		default:
		break;
	}
}
int main(void)
{
 2ec:	cf 93       	push	r28
 2ee:	df 93       	push	r29
 2f0:	00 d0       	rcall	.+0      	; 0x2f2 <main+0x6>
 2f2:	00 d0       	rcall	.+0      	; 0x2f4 <main+0x8>
 2f4:	cd b7       	in	r28, 0x3d	; 61
 2f6:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0x00; PORTA = 0xFF;
 2f8:	11 b8       	out	0x01, r1	; 1
 2fa:	8f ef       	ldi	r24, 0xFF	; 255
 2fc:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x00;
 2fe:	84 b9       	out	0x04, r24	; 4
 300:	15 b8       	out	0x05, r1	; 5
	unsigned long B_elapsedTime = 2;
	unsigned long B_cnt = 0;
	const unsigned long timer_Period = 1;
	
	
	TimerSet(timer_Period);
 302:	61 e0       	ldi	r22, 0x01	; 1
 304:	70 e0       	ldi	r23, 0x00	; 0
 306:	80 e0       	ldi	r24, 0x00	; 0
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	3e df       	rcall	.-388    	; 0x188 <TimerSet>
	TimerOn();
 30c:	dd de       	rcall	.-582    	; 0xc8 <TimerOn>
 30e:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <TL_state>
	
	TL_state = TL_init;
 312:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <BL_state>
	BL_state = BL_init;
 316:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <s_state>
	s_state = s_init;
 31a:	19 82       	std	Y+1, r1	; 0x01
	DDRB = 0xFF; PORTB = 0x00;
	
	unsigned long TL_elapsedTime = 300;
	unsigned long BL_elapsedTime = 1000;
	unsigned long B_elapsedTime = 2;
	unsigned long B_cnt = 0;
 31c:	1a 82       	std	Y+2, r1	; 0x02
 31e:	1b 82       	std	Y+3, r1	; 0x03
 320:	1c 82       	std	Y+4, r1	; 0x04
 322:	41 2c       	mov	r4, r1
	DDRA = 0x00; PORTA = 0xFF;
	DDRB = 0xFF; PORTB = 0x00;
	
	unsigned long TL_elapsedTime = 300;
	unsigned long BL_elapsedTime = 1000;
	unsigned long B_elapsedTime = 2;
 324:	51 2c       	mov	r5, r1
 326:	32 01       	movw	r6, r4
 328:	68 94       	set
 32a:	41 f8       	bld	r4, 1
 32c:	0f 2e       	mov	r0, r31
{
	DDRA = 0x00; PORTA = 0xFF;
	DDRB = 0xFF; PORTB = 0x00;
	
	unsigned long TL_elapsedTime = 300;
	unsigned long BL_elapsedTime = 1000;
 32e:	f8 ee       	ldi	r31, 0xE8	; 232
 330:	8f 2e       	mov	r8, r31
 332:	f3 e0       	ldi	r31, 0x03	; 3
 334:	9f 2e       	mov	r9, r31
 336:	a1 2c       	mov	r10, r1
 338:	b1 2c       	mov	r11, r1
 33a:	f0 2d       	mov	r31, r0
 33c:	0f 2e       	mov	r0, r31
int main(void)
{
	DDRA = 0x00; PORTA = 0xFF;
	DDRB = 0xFF; PORTB = 0x00;
	
	unsigned long TL_elapsedTime = 300;
 33e:	fc e2       	ldi	r31, 0x2C	; 44
 340:	cf 2e       	mov	r12, r31
 342:	dd 24       	eor	r13, r13
 344:	d3 94       	inc	r13
 346:	e1 2c       	mov	r14, r1
 348:	f1 2c       	mov	r15, r1
 34a:	f0 2d       	mov	r31, r0
 34c:	80 b1       	in	r24, 0x00	; 0
	BL_state = BL_init;
	s_state = s_init;
	
	while(1)
	{
		button = ~PINA & 0x04;
 34e:	80 95       	com	r24
 350:	84 70       	andi	r24, 0x04	; 4
 352:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <button>
 356:	88 23       	and	r24, r24
		if(button && B_elapsedTime >= 2 && B_cnt < 1000)
 358:	a9 f1       	breq	.+106    	; 0x3c4 <main+0xd8>
 35a:	22 e0       	ldi	r18, 0x02	; 2
 35c:	42 16       	cp	r4, r18
 35e:	51 04       	cpc	r5, r1
 360:	61 04       	cpc	r6, r1
 362:	71 04       	cpc	r7, r1
 364:	78 f1       	brcs	.+94     	; 0x3c4 <main+0xd8>
 366:	89 81       	ldd	r24, Y+1	; 0x01
 368:	9a 81       	ldd	r25, Y+2	; 0x02
 36a:	ab 81       	ldd	r26, Y+3	; 0x03
 36c:	bc 81       	ldd	r27, Y+4	; 0x04
 36e:	88 3e       	cpi	r24, 0xE8	; 232
 370:	93 40       	sbci	r25, 0x03	; 3
 372:	a1 05       	cpc	r26, r1
 374:	b1 05       	cpc	r27, r1
 376:	80 f4       	brcc	.+32     	; 0x398 <main+0xac>
		{
			TickFct_Sound();
 378:	79 df       	rcall	.-270    	; 0x26c <TickFct_Sound>
 37a:	89 81       	ldd	r24, Y+1	; 0x01
			B_elapsedTime = 0;
			B_cnt++;
 37c:	9a 81       	ldd	r25, Y+2	; 0x02
 37e:	ab 81       	ldd	r26, Y+3	; 0x03
 380:	bc 81       	ldd	r27, Y+4	; 0x04
 382:	01 96       	adiw	r24, 0x01	; 1
 384:	a1 1d       	adc	r26, r1
 386:	b1 1d       	adc	r27, r1
 388:	89 83       	std	Y+1, r24	; 0x01
 38a:	9a 83       	std	Y+2, r25	; 0x02
 38c:	ab 83       	std	Y+3, r26	; 0x03
 38e:	bc 83       	std	Y+4, r27	; 0x04
 390:	41 2c       	mov	r4, r1
	{
		button = ~PINA & 0x04;
		if(button && B_elapsedTime >= 2 && B_cnt < 1000)
		{
			TickFct_Sound();
			B_elapsedTime = 0;
 392:	51 2c       	mov	r5, r1
 394:	32 01       	movw	r6, r4
 396:	16 c0       	rjmp	.+44     	; 0x3c4 <main+0xd8>
			B_cnt++;
 398:	89 81       	ldd	r24, Y+1	; 0x01
		}
		else if(button && B_elapsedTime >= 2 && (B_cnt >= 1000) && (B_cnt < 3000))
 39a:	9a 81       	ldd	r25, Y+2	; 0x02
 39c:	ab 81       	ldd	r26, Y+3	; 0x03
 39e:	bc 81       	ldd	r27, Y+4	; 0x04
 3a0:	88 3b       	cpi	r24, 0xB8	; 184
 3a2:	2b e0       	ldi	r18, 0x0B	; 11
 3a4:	92 07       	cpc	r25, r18
 3a6:	a1 05       	cpc	r26, r1
 3a8:	b1 05       	cpc	r27, r1
 3aa:	40 f4       	brcc	.+16     	; 0x3bc <main+0xd0>
 3ac:	01 96       	adiw	r24, 0x01	; 1
		{
			B_cnt++;
 3ae:	a1 1d       	adc	r26, r1
 3b0:	b1 1d       	adc	r27, r1
 3b2:	89 83       	std	Y+1, r24	; 0x01
 3b4:	9a 83       	std	Y+2, r25	; 0x02
 3b6:	ab 83       	std	Y+3, r26	; 0x03
 3b8:	bc 83       	std	Y+4, r27	; 0x04
 3ba:	04 c0       	rjmp	.+8      	; 0x3c4 <main+0xd8>
 3bc:	19 82       	std	Y+1, r1	; 0x01
		}
		else if(button && B_elapsedTime >= 2 && B_cnt >= 3000)
		{
			B_cnt = 0;
 3be:	1a 82       	std	Y+2, r1	; 0x02
 3c0:	1b 82       	std	Y+3, r1	; 0x03
 3c2:	1c 82       	std	Y+4, r1	; 0x04
 3c4:	8c e2       	ldi	r24, 0x2C	; 44
		}
		
		if(TL_elapsedTime >= 300)
 3c6:	c8 16       	cp	r12, r24
 3c8:	81 e0       	ldi	r24, 0x01	; 1
 3ca:	d8 06       	cpc	r13, r24
 3cc:	e1 04       	cpc	r14, r1
 3ce:	f1 04       	cpc	r15, r1
 3d0:	20 f0       	brcs	.+8      	; 0x3da <main+0xee>
		{
			TickFct_ThreeLeds();
 3d2:	eb de       	rcall	.-554    	; 0x1aa <TickFct_ThreeLeds>
 3d4:	c1 2c       	mov	r12, r1
			TL_elapsedTime = 0;
 3d6:	d1 2c       	mov	r13, r1
 3d8:	76 01       	movw	r14, r12
 3da:	98 ee       	ldi	r25, 0xE8	; 232
		}
		if(BL_elapsedTime >= 1000)
 3dc:	89 16       	cp	r8, r25
 3de:	93 e0       	ldi	r25, 0x03	; 3
 3e0:	99 06       	cpc	r9, r25
 3e2:	a1 04       	cpc	r10, r1
 3e4:	b1 04       	cpc	r11, r1
 3e6:	20 f0       	brcs	.+8      	; 0x3f0 <main+0x104>
		{
			TickFct_BlinkLed();
 3e8:	1a df       	rcall	.-460    	; 0x21e <TickFct_BlinkLed>
			BL_elapsedTime = 0;
 3ea:	81 2c       	mov	r8, r1
 3ec:	91 2c       	mov	r9, r1
 3ee:	54 01       	movw	r10, r8
		}
		TickFct_Combine();
 3f0:	6f df       	rcall	.-290    	; 0x2d0 <TickFct_Combine>
 3f2:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <TimerFlag>
		while(!TimerFlag){}
 3f6:	88 23       	and	r24, r24
 3f8:	e1 f3       	breq	.-8      	; 0x3f2 <main+0x106>
 3fa:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <TimerFlag>
		TimerFlag = 0;
 3fe:	af ef       	ldi	r26, 0xFF	; 255
		TL_elapsedTime += timer_Period;
 400:	ca 1a       	sub	r12, r26
 402:	da 0a       	sbc	r13, r26
 404:	ea 0a       	sbc	r14, r26
 406:	fa 0a       	sbc	r15, r26
 408:	bf ef       	ldi	r27, 0xFF	; 255
		BL_elapsedTime += timer_Period;
 40a:	8b 1a       	sub	r8, r27
 40c:	9b 0a       	sbc	r9, r27
 40e:	ab 0a       	sbc	r10, r27
 410:	bb 0a       	sbc	r11, r27
 412:	2f ef       	ldi	r18, 0xFF	; 255
		B_elapsedTime += timer_Period;
 414:	42 1a       	sub	r4, r18
 416:	52 0a       	sbc	r5, r18
 418:	62 0a       	sbc	r6, r18
 41a:	72 0a       	sbc	r7, r18
 41c:	97 cf       	rjmp	.-210    	; 0x34c <main+0x60>

0000041e <_exit>:
	}
 41e:	f8 94       	cli

00000420 <__stop_program>:
 420:	ff cf       	rjmp	.-2      	; 0x420 <__stop_program>
